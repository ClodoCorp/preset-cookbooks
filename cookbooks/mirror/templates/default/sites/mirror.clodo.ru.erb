server {
  listen       80;
  server_name  mirror.clodo.ru 1.mirror.clodo.ru 2.mirror.clodo.ru mirror.ov.clodo.ru mirror.kh.clodo.ru _;

  access_log /var/log/nginx/mirror.log;
  error_log /var/log/nginx/mirror.log info;

  resolver 8.8.8.8;
  resolver_timeout 10;

  location /fetch {
    internal;
    send_timeout 10;
    client_body_timeout 10;
    set_by_lua $srv 'return ngx.var.srv';
    set_by_lua $url 'return ngx.var.url';
    proxy_redirect http://$srv$url http://$host$url;
    server_name_in_redirect on;
#    proxy_pass_request_headers off;
    proxy_intercept_errors on;
    proxy_pass http://$srv$url;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header Host $srv;
    proxy_cache_key $url;
  }

  location = / {
    default_type text/plain;
    return 200;
  }

  location /favicon.ico {
    default_type image/ico;
    return 200;
  }

  location / {
    set $srv '';
    set $url '';
    content_by_lua '
      centos_servers = {"mirror.yandex.ru", "mirror.centos.org", "mirror.corbina.net"}
      debian_servers = {"mirror.yandex.ru", "ftp.ru.debian.org", "ftp.debian.org", "ftp.fi.debian.org", "ftp.de.debian.org", "ftp.us.debian.org"}
      ubuntu_servers = {"mirror.yandex.ru"}

      math.randomseed(os.time())

      match, n = ngx.re.match(ngx.var.request_uri, "^/([^/]+)/")
      os = match[1]

      if os == "centos" then servers = centos_servers
      elseif os == "ubuntu" then servers = ubuntu_servers
      elseif os == "debian" then servers = debian_servers
      end

      local n = #servers
      while n > 2 do
        local k = math.random(n)
        servers[n], servers[k] = servers[k], servers[n]
        n = n - 1
      end

      local body = nil

      for i,server in ipairs(servers) do
        ngx.var.srv = server
        ngx.var.url = ngx.var.request_uri
        if server ~= nil then
          res = ngx.location.capture("/fetch", {method = ngx.HTTP_GET, share_all_vars = true})
          if res.status == 200 or res.status == 404 or res.status == 403 then
            body = res.body
            break
          elseif res.status == 301 then
            match,n = ngx.re.match(res.header["Location"], "http://([a-zA-Z\._-]+)(/.*)")
            ngx.var.srv = match[1]
            ngx.var.url = match[2]
            res = ngx.location.capture("/fetch", {method = ngx.HTTP_GET, share_all_vars = true})
            if res.status == 200 or res.status == 404 or res.status == 403 then
              body = res.body
              break
            end
          end
        end
      end

      if body ~= nil then
        ngx.header.content_type = res.header["Content-Type"]
        ngx.print(body)
        ngx.exit(res.status)
      else
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end
    ';
  }

}

